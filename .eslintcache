[{"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\index.js":"1","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\reportWebVitals.js":"2","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\App.js":"3","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Contexts\\UserContext.js":"4","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Hooks\\useStorage.js":"5","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\Home.js":"6","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\Modal.js":"7","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Hooks\\useModal.js":"8","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\SideNav.js":"9","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\CompletePages.js":"10","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Create.js":"11","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Layout\\WebLayout.js":"12","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Overview.js":"13","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Stocks.js":"14","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Store.js":"15","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\truncate.js":"16","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Settings.js":"17","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\ModalLayout.js":"18","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Modal\\CreateTransaction.js":"19","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Modal\\StockDisplay.js":"20","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\FavouriteButton.js":"21","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Modal\\ProductDisplay.js":"22","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\productStatus.js":"23","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Modal\\TransactionDisplay.js":"24","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\Loading.js":"25","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\TransactionTable.js":"26","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\capitalize.js":"27","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\isToday.js":"28","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\PriceBar.js":"29","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\favSort.js":"30","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Records.js":"31"},{"size":500,"mtime":499162500000,"results":"32","hashOfConfig":"33"},{"size":362,"mtime":499162500000,"results":"34","hashOfConfig":"33"},{"size":1121,"mtime":1619141868808,"results":"35","hashOfConfig":"33"},{"size":3276,"mtime":1619927428012,"results":"36","hashOfConfig":"33"},{"size":606,"mtime":1613407961223,"results":"37","hashOfConfig":"33"},{"size":1229,"mtime":1610678739139,"results":"38","hashOfConfig":"33"},{"size":477,"mtime":1610670083739,"results":"39","hashOfConfig":"33"},{"size":370,"mtime":1619143187742,"results":"40","hashOfConfig":"33"},{"size":5726,"mtime":1621063003468,"results":"41","hashOfConfig":"33"},{"size":1105,"mtime":1611240473893,"results":"42","hashOfConfig":"33"},{"size":1400,"mtime":1611242060087,"results":"43","hashOfConfig":"33"},{"size":752,"mtime":1619174555217,"results":"44","hashOfConfig":"33"},{"size":4128,"mtime":1619174696068,"results":"45","hashOfConfig":"33"},{"size":12592,"mtime":1619927590455,"results":"46","hashOfConfig":"33"},{"size":5347,"mtime":1619928287821,"results":"47","hashOfConfig":"33"},{"size":134,"mtime":1612118765220,"results":"48","hashOfConfig":"33"},{"size":6358,"mtime":1619927576481,"results":"49","hashOfConfig":"33"},{"size":630,"mtime":1619146425030,"results":"50","hashOfConfig":"33"},{"size":29141,"mtime":1619928650723,"results":"51","hashOfConfig":"33"},{"size":408,"mtime":1612657289519,"results":"52","hashOfConfig":"33"},{"size":767,"mtime":1619927332723,"results":"53","hashOfConfig":"33"},{"size":4236,"mtime":1619928760808,"results":"54","hashOfConfig":"33"},{"size":146,"mtime":1613237332215,"results":"55","hashOfConfig":"33"},{"size":7656,"mtime":1619927529390,"results":"56","hashOfConfig":"33"},{"size":355,"mtime":1614084370014,"results":"57","hashOfConfig":"33"},{"size":5469,"mtime":1619927409800,"results":"58","hashOfConfig":"33"},{"size":99,"mtime":1614156885186,"results":"59","hashOfConfig":"60"},{"size":261,"mtime":1614167495508,"results":"61","hashOfConfig":"33"},{"size":1746,"mtime":1619928462716,"results":"62","hashOfConfig":"33"},{"size":756,"mtime":1615354219978,"results":"63","hashOfConfig":"33"},{"size":3931,"mtime":1619929470398,"results":"64","hashOfConfig":"33"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"15f6sn4",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"67"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"67"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"67"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"67"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"67"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"67"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"67"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"67"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"145yeeb",{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\index.js",[],["143","144"],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\reportWebVitals.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\App.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Contexts\\UserContext.js",["145"],"import React, { useEffect, useState } from \"react\";\r\nimport useModal from \"../Hooks/useModal\";\r\nimport useStorage from \"../Hooks/useStorage\";\r\n\r\nexport const userContext = React.createContext();\r\n\r\nexport default function UserContext({ children }) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useStorage(\"data\");\r\n  const [user, setUser] = useStorage(\"user\");\r\n  const [search, setSearch] = useState(\"\");\r\n  /*\r\n  -record[]\r\n\r\n   */\r\n  const [storeProducts, setStoreProducts] = useStorage(\"products\", []);\r\n  const [favouriteProducts, setFavouriteProducts] = useStorage(\r\n    \"favourites\",\r\n    []\r\n  );\r\n  const [transactions, setTransactions] = useStorage(\"transactions\", []);\r\n  const [stocks, setStocks] = useStorage(\"stocks\", []);\r\n\r\n  const [isVisible, setModal, content] = useModal();\r\n\r\n  const checkProduct = async () => {\r\n    let pd = await fetch(\"https://jengk-api.vercel.app/api/shaklee/products\")\r\n      .then((r) => r.json())\r\n      .then((d) => d);\r\n    if (Date.now() - pd.lastValidation > 60 * 1000 * 60 * 2) {\r\n      //2 hours\r\n      const ck = await fetch(\"https://jengk-api.vercel.app/api/shaklee\")\r\n        .then((r) => r.json())\r\n        .then((d) => d);\r\n      if (ck.ok) {\r\n        pd = await fetch(\"https://jengk-api.vercel.app/api/shaklee/products\")\r\n          .then((r) => r.json())\r\n          .then((d) => d);\r\n      }\r\n    }\r\n    setStoreProducts(pd.data);\r\n    setData((prev) => ({ ...prev, lastUpdate: pd.lastValidation }));\r\n    setLoading(false);\r\n  };\r\n\r\n  //const fetchProduct = async () => {\r\n  //  await fetch(\"https://shaklee-api.herokuapp.com/products/all\")\r\n  //    .then((r) => r.json())\r\n  //    .then((d) => {\r\n  //      if (d.ok) {\r\n  //        setStoreProducts(d.data);\r\n  //        setData((prev) => ({ ...prev, lastUpdate: d.lastUpdate }));\r\n  //      }\r\n  //      setLoading(false);\r\n  //    })\r\n  //    .catch((e) => {\r\n  //      console.log(e);\r\n  //      setLoading(false);\r\n  //    });\r\n  //};\r\n\r\n  const toggleTransactionStatus = (tid) => {\r\n    setTransactions(\r\n      transactions.map((q) => {\r\n        if (q.id === tid) {\r\n          return { ...q, isCompleted: !q.isCompleted };\r\n        }\r\n        return q;\r\n      })\r\n    );\r\n  };\r\n\r\n  const toggleFavourite = (pid) => {\r\n    setFavouriteProducts((f) => {\r\n      if (f.includes(pid)) {\r\n        return f.filter((g) => g !== pid);\r\n      }\r\n      return [...f, pid];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    //const d = new Date();\r\n    checkProduct();\r\n    //if (\r\n    //  !storeProducts.data ||\r\n    //  d.toDateString() !== new Date(data.lastUpdate).toDateString()\r\n    //) {\r\n    //  fetchProduct();\r\n    //} else {\r\n    //  setLoading(false);\r\n    //}\r\n  }, []);\r\n\r\n  return (\r\n    <userContext.Provider\r\n      value={{\r\n        data,\r\n        setData,\r\n        loading,\r\n        user,\r\n        setUser,\r\n        search,\r\n        setSearch,\r\n        isVisible,\r\n        setModal,\r\n        content,\r\n        storeProducts,\r\n        setStoreProducts,\r\n        favouriteProducts,\r\n        setFavouriteProducts,\r\n        toggleFavourite,\r\n        transactions,\r\n        setTransactions,\r\n        toggleTransactionStatus,\r\n        stocks,\r\n        setStocks,\r\n      }}\r\n    >\r\n      {children}\r\n    </userContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Hooks\\useStorage.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\Home.js",["146","147"],"import React, { useContext, useState } from \"react\";\r\nimport { userContext } from \"../Contexts/UserContext\";\r\nimport Modal from \"./Modal\";\r\nimport ModalAdd from \"./ModalAdd\";\r\nimport ModalFrame from \"./ModalFrame\";\r\nimport Record from \"./Record\";\r\nimport AddRecord from \"../Modals/AddRecord/\";\r\n\r\nexport default function Home() {\r\n  const { data, loading, show, handleModal } = useContext(userContext);\r\n\r\n  return (\r\n    <div className=\"relative h-screen overflow-auto\">\r\n      <div className=\"mx-auto max-w-xs md:max-w-md lg:max-w-lg xl:max-w-xl 2xl:max-w-2xl \">\r\n        {loading ? (\r\n          <h1>Loading</h1>\r\n        ) : (\r\n          <>\r\n            <h1 className=\"text-3xl pt-9 mb-3\">Welcome</h1>\r\n            <h2 className=\"text-2xl mb-3\">Records</h2>\r\n            <div\r\n              onClick={() => {\r\n                handleModal(AddRecord);\r\n                console.log(\"Modal\");\r\n              }}\r\n            >\r\n              C\r\n            </div>\r\n            <Record />\r\n          </>\r\n        )}\r\n      </div>\r\n      <div id=\"modal-root\">\r\n        <ModalFrame />\r\n      </div>\r\n      {show ? (\r\n        <Modal>\r\n          <ModalAdd />\r\n        </Modal>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",["148","149"],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\Modal.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Hooks\\useModal.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\SideNav.js",["150"],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\CompletePages.js",[],["151","152"],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Create.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Layout\\WebLayout.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Overview.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Stocks.js",["153","154","155","156"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  AiOutlineAppstore,\r\n  AiOutlineBars,\r\n  AiOutlineDollar,\r\n  AiOutlineFileUnknown,\r\n  AiOutlineSafety,\r\n  AiOutlineShopping,\r\n  AiOutlineTag,\r\n} from \"react-icons/ai\";\r\nimport { BiCube } from \"react-icons/bi\";\r\nimport FavouriteButton from \"../Components/FavouriteButton\";\r\nimport Loading from \"../Components/Loading\";\r\nimport { userContext } from \"../Contexts/UserContext\";\r\nimport { favSort } from \"../helper/favSort\";\r\nimport CreateTransaction from \"../Modal/CreateTransaction\";\r\nimport ProductDisplay from \"../Modal/ProductDisplay\";\r\n\r\nexport default function Stocks() {\r\n  const { setModal, stocks, favouriteProducts } = useContext(userContext);\r\n\r\n  const [view, setView] = useState(() => \"GRID\");\r\n  const [contentLoading, setContentLoading] = useState(true);\r\n  const [stockSearch, setStockSearch] = useState(\"\");\r\n  const [result, setResult] = useState([]);\r\n\r\n  const stockSummary = stocks.reduce(\r\n    (a, b) => {\r\n      a.count += b.count;\r\n      a.uv += b.dn.uv * b.count;\r\n      a.pv += b.dn.pv * b.count;\r\n      return a;\r\n    },\r\n    { count: 0, uv: 0, pv: 0 }\r\n  );\r\n\r\n  useEffect(() => {\r\n    setContentLoading(true);\r\n    const q = [...stocks].sort((a, b) => {\r\n      if (\r\n        favouriteProducts.includes(a.product_no) &&\r\n        favouriteProducts.includes(b.product_no)\r\n      ) {\r\n        return 0;\r\n      } else {\r\n        if (favouriteProducts.includes(a.product_no)) {\r\n          return -1;\r\n        }\r\n        return 1;\r\n      }\r\n    });\r\n    setResult(q);\r\n    setContentLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setResult(favSort(stocks, favouriteProducts));\r\n  }, [stocks.length]);\r\n\r\n  // To sort\r\n  useEffect(() => {\r\n    setContentLoading(true);\r\n    if (stockSearch.length > 0) {\r\n      setResult((r) =>\r\n        favSort(\r\n          r\r\n            .filter(\r\n              (s) =>\r\n                s.name.toLowerCase().indexOf(stockSearch.toLowerCase()) > -1 ||\r\n                s.product_no.toLowerCase().indexOf(stockSearch.toLowerCase()) >\r\n                  -1 ||\r\n                s.tags.join().toLowerCase().indexOf(stockSearch.toLowerCase()) >\r\n                  -1\r\n            )\r\n            .sort((a, b) =>\r\n              favouriteProducts && favouriteProducts.includes(a.product_no)\r\n                ? -1\r\n                : 1\r\n            ),\r\n          favouriteProducts\r\n        )\r\n      );\r\n    } else {\r\n      setResult(favSort(stocks, favouriteProducts));\r\n    }\r\n    //setResult((r) => favSort(r, favouriteProducts));\r\n    setContentLoading(false);\r\n  }, [view]);\r\n\r\n  // To filter\r\n  useEffect(() => {\r\n    setContentLoading(true);\r\n    if (stockSearch.length > 0) {\r\n      setResult((r) =>\r\n        favSort(\r\n          r.filter(\r\n            (s) =>\r\n              s.name.toLowerCase().indexOf(stockSearch.toLowerCase()) > -1 ||\r\n              s.product_no.toLowerCase().indexOf(stockSearch.toLowerCase()) >\r\n                -1 ||\r\n              s.tags.join().toLowerCase().indexOf(stockSearch.toLowerCase()) >\r\n                -1 ||\r\n              (favouriteProducts.includes(s.product_no) &&\r\n                \"favourite\".indexOf(stockSearch.toLowerCase()) > -1)\r\n          ),\r\n          favouriteProducts\r\n        )\r\n      );\r\n    } else {\r\n      setResult(favSort(stocks, favouriteProducts));\r\n    }\r\n    setContentLoading(false);\r\n  }, [stockSearch]);\r\n\r\n  //useEffect(() => {\r\n  //  setContentLoading(true);\r\n  //  if (stockState.userInput.length > 0) {\r\n  //    setResult(favSort(stockState.filteredSuggestions, favouriteProducts));\r\n  //  } else {\r\n  //    setResult(favSort(stocks, favouriteProducts));\r\n  //  }\r\n  //  setContentLoading(false);\r\n  //}, [stockState.userInput, view, stocks]);\r\n\r\n  const GridDisplay = ({ result }) => {\r\n    return (\r\n      <div className=\"grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4 mb-6\">\r\n        {result.map((s) => (\r\n          <div\r\n            className=\"relative flex flex-col rounded shadow-md bg-white text-left hover:cursor-pointer\"\r\n            onClick={() =>\r\n              setModal(<ProductDisplay prod_no={s.product_no}></ProductDisplay>)\r\n            }\r\n            key={s.product_no}\r\n          >\r\n            <div className=\"relative h-52 w-full  rounded-t\">\r\n              <div\r\n                className=\"w-full h-full bg-center bg-no-repeat bg-contain\"\r\n                style={{ backgroundImage: `url(${s.images[0]})` }}\r\n              ></div>\r\n            </div>\r\n\r\n            <div className=\"flex flex-col items-start flex-grow p-2 bg-white rounded-b\">\r\n              <div className=\"flex flex-row items-center space-x-3 py-2 w-full\">\r\n                <AiOutlineTag className=\"ml-2 text-lg text-gray-600\" />\r\n                <div className=\"font-light text-gray-600 truncate w-28 sm:w-52 md:w-36\">\r\n                  {s.name}\r\n                </div>\r\n              </div>\r\n              <div className=\"flex flex-row items-center space-x-3 py-2\">\r\n                <BiCube className=\"ml-2 text-lg text-gray-600\" />\r\n                <div className=\"text-gray-600 font-light truncate w-28 sm:w-52 md:w-36\">{`x${s.count}`}</div>\r\n              </div>\r\n              <div className=\"flex flex-row items-center space-x-3 py-2\">\r\n                <AiOutlineDollar className=\"ml-2 text-lg text-gray-600\" />\r\n                <div className=\"text-gray-600 font-light truncate w-28 sm:w-52 md:w-36\">{`RM ${\r\n                  s.dn.price * s.count\r\n                }`}</div>\r\n              </div>\r\n            </div>\r\n            <FavouriteButton\r\n              parentClassName=\"absolute right-0 p-2\"\r\n              prod_no={s.product_no}\r\n              size=\"20px\"\r\n              isFav={\r\n                favouriteProducts && favouriteProducts.includes(s.product_no)\r\n              }\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const ListDisplay = ({ result }) => (\r\n    <div className=\"flex flex-col space-y-4 mb-6\">\r\n      {result.map((s) => (\r\n        <div\r\n          className=\"flex flex-row items-center space-x-4 rounded shadow-md bg-white overflow-x-hidden text-left hover:cursor-pointer\"\r\n          onClick={() =>\r\n            setModal(<ProductDisplay prod_no={s.product_no}></ProductDisplay>)\r\n          }\r\n          key={s.product_no}\r\n        >\r\n          <img\r\n            className=\"h-16 w-16 rounded-l p-2\"\r\n            src={s.images[0]}\r\n            alt={s.name}\r\n          />\r\n          <div className=\"flex flex-row items-start flex-grow space-x-2 bg-white\">\r\n            <div className=\"flex flex-row w-2/3 sm:w-1/2 md:w-1/3 sm:pl-12 md:pl-8 items-center space-x-1 sm: py-2\">\r\n              <AiOutlineTag className=\"mr-2 text-lg text-gray-600\" />\r\n              <div className=\"  font-light text-gray-600 truncate w-28 xl:w-40 2xl:w-60\">\r\n                {s.name}\r\n              </div>\r\n            </div>\r\n            <div className=\"flex flex-row w-1/3 sm:w-1/2 md:w-1/3 sm:pl-12 md:pl-8 items-center space-x-3 py-2\">\r\n              <BiCube className=\"mr-2 text-lg text-gray-600\" />\r\n              <div className=\"text-gray-600 font-light truncate w-8 sm:w-20 xl:w-40 2xl:w-60\">{`x${s.count}`}</div>\r\n            </div>\r\n            <div className=\"hidden md:flex flex-row w-1/3 sm:pl-12 md:pl-8 items-center space-x-3 py-2\">\r\n              <AiOutlineDollar className=\"mr-2 text-lg text-gray-600\" />\r\n              <div className=\"text-gray-600 font-light truncate w-8 sm:w-20 xl:w-40 2xl:w-60\">{`RM ${\r\n                s.dn.price * s.count\r\n              }`}</div>\r\n            </div>\r\n          </div>\r\n          <FavouriteButton\r\n            parentClassName=\"flex items-center justify-center p-2 pr-4\"\r\n            prod_no={s.product_no}\r\n            size=\"16px\"\r\n            isFav={\r\n              favouriteProducts && favouriteProducts.includes(s.product_no)\r\n            }\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"h-1/2\">\r\n      <div className=\"text-3xl my-6 text-gray-600\">Stocks</div>\r\n      {stocks.length === 0 ? (\r\n        <div className=\"flex flex-col h-full justify-center items-center my-8 \">\r\n          <div className=\"text-xl font-semibold\">No Stock Found</div>\r\n          <AiOutlineFileUnknown className=\"text-4xl my-4\" />\r\n          <div>Refill your stock by adding records!</div>\r\n          <button\r\n            className=\"flex items-center rounded bg-green-500 text-white px-3 py-2 mt-4 shiny-button\"\r\n            onClick={() => {\r\n              setModal(<CreateTransaction></CreateTransaction>);\r\n            }}\r\n          >\r\n            <div>Add Record</div>\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"flex flex-col sm:flex-row sm:justify-around rounded shadow-md bg-white p-8 space-y-6 sm:space-y-0 \">\r\n            <div className=\"flex flex-row items-center w-full sm:w-1/3 space-x-4 md:space-x-6 lg:space-x-8  md:pl-4 lg:pl-6  2xl:pl-28\">\r\n              <div className=\"w-12 h-12 flex items-center justify-center rounded-full\">\r\n                <AiOutlineShopping size=\"28px\" />\r\n              </div>\r\n              <div className=\"flex flex-col\">\r\n                <div className=\"text-sm text-gray-400 font-medium\">\r\n                  Total Stocks\r\n                </div>\r\n                <div className=\"text-xl  text-gray-600 font-semibold\">\r\n                  {stockSummary.count}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex flex-row items-center  w-full sm:w-1/3 space-x-4 md:space-x-6 lg:space-x-8  md:pl-4 lg:pl-6  2xl:pl-28\">\r\n              <div className=\"w-12 h-12 flex items-center justify-center rounded-full\">\r\n                <AiOutlineSafety size=\"28px\" />\r\n              </div>\r\n              <div className=\"flex flex-col\">\r\n                <div className=\"text-sm text-gray-400 font-medium\">\r\n                  Total UV\r\n                </div>\r\n                <div className=\"text-xl  text-gray-600 font-semibold\">\r\n                  {stockSummary.uv}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex flex-row items-center  w-full sm:w-1/3 space-x-4 md:space-x-6 lg:space-x-8  md:pl-4 lg:pl-6  2xl:pl-28\">\r\n              <div className=\"w-12 h-12 flex items-center justify-center rounded-full\">\r\n                <AiOutlineSafety size=\"28px\" />\r\n              </div>\r\n              <div className=\"flex flex-col\">\r\n                <div className=\"text-sm text-gray-400 font-medium\">\r\n                  Total PV\r\n                </div>\r\n                <div className=\"text-xl text-gray-600 font-semibold\">\r\n                  {stockSummary.pv}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex flex-row justify-between items-center my-6 space-x-6\">\r\n            <div className=\"flex-grow\">\r\n              <input\r\n                className=\"bg-gray-50 w-full border-b h-10 px-2 rounded-none\"\r\n                type=\"text\"\r\n                name=\"stock\"\r\n                autoComplete=\"off\"\r\n                placeholder=\"Search E.g. Favourite/Oos/Available...\"\r\n                value={stockSearch}\r\n                onChange={(e) => setStockSearch(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"flex flex-row\">\r\n              <button\r\n                className={`outline-none rounded-l-full text-white py-1 px-3 ${\r\n                  view === \"LIST\" ? \"bg-blue-400  shadow-lg\" : \"bg-gray-300\"\r\n                }`}\r\n                onClick={() => {\r\n                  setContentLoading(true);\r\n                  setView(\"LIST\");\r\n                  setContentLoading(false);\r\n                }}\r\n              >\r\n                <AiOutlineBars className=\"text-xl\" />\r\n              </button>\r\n              <button\r\n                className={`outline-none rounded-r-full text-white py-1 px-3 ${\r\n                  view === \"GRID\" ? \"bg-blue-400 shadow-lg\" : \"bg-gray-300\"\r\n                }`}\r\n                onClick={() => {\r\n                  setContentLoading(true);\r\n                  setView(\"GRID\");\r\n                  setContentLoading(false);\r\n                }}\r\n              >\r\n                <AiOutlineAppstore className=\"text-xl\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          {contentLoading ? (\r\n            <Loading parentClassName=\"mt-16\" />\r\n          ) : view === \"GRID\" ? (\r\n            <GridDisplay result={result} />\r\n          ) : (\r\n            <ListDisplay result={result} />\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Store.js",["157","158"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport FavouriteButton from \"../Components/FavouriteButton\";\r\nimport { userContext } from \"../Contexts/UserContext\";\r\nimport { useSuggestionInput } from \"react-hooks-web\";\r\nimport {\r\n  AiOutlineDollarCircle,\r\n  AiOutlineSafety,\r\n  AiOutlineTag,\r\n} from \"react-icons/ai\";\r\nimport ProductDisplay from \"../Modal/ProductDisplay\";\r\nimport Loading from \"../Components/Loading\";\r\n\r\nexport default function Store() {\r\n  const { storeProducts, setModal, favouriteProducts, loading } = useContext(\r\n    userContext\r\n  );\r\n\r\n  const [contentLoading, setContentLoading] = useState(true);\r\n  const { state: storeState, onChange: storeOnChange } = useSuggestionInput({\r\n    suggestions: storeProducts.map((s) => ({\r\n      ...s,\r\n      suggestionName: s.name.toLowerCase(),\r\n      tagString: s.tags.join(\" \").toLowerCase(),\r\n    })),\r\n    keys: [\"name\", \"tagString\", \"status\"],\r\n  });\r\n\r\n  const [result, setResult] = useState(() => storeProducts);\r\n\r\n  useEffect(() => {\r\n    setResult(\r\n      storeProducts.sort((a, b) =>\r\n        favouriteProducts && favouriteProducts.includes(a.product_no) ? -1 : 1\r\n      )\r\n    );\r\n    setContentLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setContentLoading(true);\r\n    if (storeState.userInput.length > 0) {\r\n      setResult(\r\n        storeState.filteredSuggestions.sort((a, b) =>\r\n          favouriteProducts && favouriteProducts.includes(a.product_no) ? -1 : 1\r\n        )\r\n      );\r\n    } else {\r\n      setResult(\r\n        storeProducts.sort((a, b) =>\r\n          favouriteProducts && favouriteProducts.includes(a.product_no) ? -1 : 1\r\n        )\r\n      );\r\n    }\r\n    setContentLoading(false);\r\n  }, [storeState.userInput, loading]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"text-3xl my-6 text-gray-600\">Store</div>\r\n      <div className=\"flex flex-row justify-between items-center my-6 space-x-6\">\r\n        <div className=\"flex-grow\">\r\n          <input\r\n            className=\"bg-gray-50 w-full border-b h-10 px-2 rounded-none\"\r\n            type=\"text\"\r\n            name=\"stock\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Search E.g. Vivix/Available/OOS...\"\r\n            value={storeState.userInput}\r\n            onChange={storeOnChange}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {contentLoading || loading ? (\r\n        <Loading parentClassName=\"mt-24\" />\r\n      ) : (\r\n        <div className=\"grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4 mb-6\">\r\n          {result.map((s) => (\r\n            <div\r\n              key={s.product_no}\r\n              className=\"hover:cursor-pointer relative flex flex-col rounded shadow-md bg-white text-left outline-none\"\r\n              onClick={() =>\r\n                setModal(\r\n                  <ProductDisplay prod_no={s.product_no}></ProductDisplay>\r\n                )\r\n              }\r\n            >\r\n              <div className=\"relative h-52 w-full  rounded-t\">\r\n                {/*<img loading=\"lazy\" src={s.images[0]} alt={s.name} />\r\n                 */}\r\n                <div\r\n                  className=\"w-full h-full bg-center bg-no-repeat bg-contain\"\r\n                  style={{ backgroundImage: `url(${s.images[0]})` }}\r\n                ></div>\r\n                {s.status === \"oos\" ? (\r\n                  <div className=\"absolute top-0 flex w-full h-full items-center justify-center rounded-t bg-gray-800 bg-opacity-50 text-xl font-bold text-gray-100\">\r\n                    Out of Stock\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n\r\n              <div className=\"flex flex-col items-start flex-grow px-2\">\r\n                <div className=\"flex flex-row items-center space-x-2 py-2 w-full\">\r\n                  <div className=\"flex flex-row items-center justify-center text-gray-500 h-8 w-8\">\r\n                    <AiOutlineTag />\r\n                  </div>\r\n                  <div className=\"  font-light text-gray-600 truncate w-28 sm:w-52 md:w-36\">\r\n                    {s.name}\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex flex-row items-center space-x-2 py-2\">\r\n                  <div className=\"flex flex-row items-center justify-center text-gray-500 h-8 w-8\">\r\n                    <AiOutlineSafety />\r\n                  </div>\r\n                  <div className=\"text-gray-600 font-light truncate w-28 sm:w-52 md:w-36\">\r\n                    {`${s.dn.uv} UV | ${s.dn.pv} PV`}\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex flex-row items-center space-x-2 py-2\">\r\n                  <div className=\"flex flex-row items-center justify-center text-gray-500 h-8 w-8 \">\r\n                    <AiOutlineDollarCircle />\r\n                  </div>\r\n                  <div className=\"text-gray-600 font-light truncate w-28 sm:w-52 md:w-36\">{`RM ${s.dn.price.toFixed(\r\n                    2\r\n                  )}`}</div>\r\n                </div>\r\n              </div>\r\n              <FavouriteButton\r\n                parentClassName=\"absolute right-0 p-2\"\r\n                prod_no={s.product_no}\r\n                size=\"20px\"\r\n                isFav={\r\n                  favouriteProducts && favouriteProducts.includes(s.product_no)\r\n                }\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\truncate.js",[],["159","160"],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Settings.js",["161"],"import React, { useContext, useState } from \"react\";\r\nimport { userContext } from \"../Contexts/UserContext\";\r\n\r\nexport default function Settings() {\r\n  const { setTransactions, setStocks, setFavouriteProducts } = useContext(\r\n    userContext\r\n  );\r\n  //const [themeExpanded, setThemeExpanded] = useState(false);\r\n\r\n  //const handleChangeTheme = () => {\r\n  //  setThemeExpanded(false);\r\n  //};\r\n  return (\r\n    <div>\r\n      <div className=\"text-3xl my-6 text-gray-600\">Settings</div>\r\n      <div className=\"my-6\">\r\n        <div className=\"text-2xl font-semibold text-gray-600\">Reset data</div>\r\n        <p className=\"my-3 \">\r\n          Clear stored inventory data in this device. This cannot be undone.\r\n        </p>\r\n        <button\r\n          className=\"px-3 py-2 text-white bg-indigo-500 rounded\"\r\n          onClick={() => {\r\n            setTransactions([]);\r\n            setStocks([]);\r\n            setFavouriteProducts([]);\r\n          }}\r\n        >\r\n          Clear Data\r\n        </button>\r\n      </div>\r\n\r\n      {/*<div className=\"my-6\">\r\n        <div className=\"text-2xl font-semibold text-gray-600\">\r\n          Log stored data\r\n        </div>\r\n        <p className=\"my-3 \">Log data for testing purpose.</p>\r\n        <div className=\"flex flex-wrap\">\r\n          <button\r\n            className=\"px-3 py-2 text-white bg-indigo-500 rounded my-1 mr-2\"\r\n            onClick={() => {\r\n              console.table(transactions);\r\n            }}\r\n          >\r\n            Transactions\r\n          </button>\r\n          <button\r\n            className=\"px-3 py-2 text-white bg-indigo-500 rounded my-1 mr-2\"\r\n            onClick={() => {\r\n              console.table(storeProducts);\r\n            }}\r\n          >\r\n            Store Products\r\n          </button>\r\n          <button\r\n            className=\"px-3 py-2 text-white bg-indigo-500 rounded my-1 mr-2\"\r\n            onClick={() => {\r\n              console.table(stocks);\r\n            }}\r\n          >\r\n            Stocks\r\n          </button>\r\n          <button\r\n            className=\"px-3 py-2 text-white bg-indigo-500 rounded my-1 mr-2\"\r\n            onClick={() => {\r\n              console.table(favouriteProducts);\r\n            }}\r\n          >\r\n            Favourite Products\r\n          </button>\r\n        </div>\r\n      </div>*/}\r\n      {/*<div className=\"my-6\">\r\n        <div className=\"text-xl font-semibold text-gray-600\">Verification</div>\r\n        <p className=\"my-4 text-gray-600\">\r\n          Verify your SID, so you can directly access name/sid between your\r\n          uplines/downlines. However, this is completely optional.\r\n        </p>\r\n        <div className=\"flex flex-col  sm:flex-row my-2 sm:space-x-6\">\r\n          <div className=\"w-full sm:w-1/2\">\r\n            <label className=\"text-gray-600\">SID</label>\r\n            <input\r\n              className=\"bg-white w-full border h-10 px-2 my-2\"\r\n              type=\"text\"\r\n              name=\"sid\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"SID\"\r\n            />\r\n          </div>\r\n          <div className=\"w-full sm:w-1/2\">\r\n            <label className=\"text-gray-600\">Full Name</label>\r\n            <input\r\n              className=\"bg-white w-full border h-10 px-2 my-2\"\r\n              type=\"text\"\r\n              name=\"fullname\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"John Smith\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <button className=\"rounded px-4 py-1.5 bg-blue-500 text-white\">\r\n          Verify\r\n        </button>\r\n      </div>\r\n      <div className=\"my-6\">\r\n        <div className=\"text-xl font-semibold mb-4 text-gray-600\">Theme</div>\r\n        <p className=\"my-4 text-gray-600\">* TO DO *</p>\r\n        <div className=\"relative flex flex-row \">\r\n          <button\r\n            className=\"flex flex-row items-center border rounded p-1.5 space-x-2 bg-white w-32\"\r\n            onClick={() => {\r\n              setThemeExpanded((p) => !p);\r\n            }}\r\n          >\r\n            <div className=\"h-6 w-6 bg-green-400\"></div>\r\n            <div className=\"flex-grow text-left\">Green</div>\r\n            <div>\r\n              <AiOutlineDown />\r\n            </div>\r\n          </button>\r\n          <button className=\"rounded px-4 py-1.5 bg-blue-500 text-white ml-4\">\r\n            Save\r\n          </button>\r\n\r\n          <div\r\n            className={\r\n              `absolute bordered rounded bg-white top-10 w-32 shadow ` +\r\n              `${!themeExpanded && \"hidden\"}`\r\n            }\r\n          >\r\n            <button\r\n              className=\"flex flex-row items-center  p-1.5 space-x-2 bg-white w-full\"\r\n              onClick={() => handleChangeTheme()}\r\n            >\r\n              <div className=\"h-6 w-6 bg-green-400\"></div>\r\n              <div>Green</div>\r\n            </button>\r\n            <button\r\n              className=\"flex flex-row items-center  p-1.5 space-x-2 bg-white w-full\"\r\n              onClick={() => handleChangeTheme()}\r\n            >\r\n              <div className=\"h-6 w-6 bg-blue-500\"></div>\r\n              <div>Blue</div>\r\n            </button>\r\n            <button\r\n              className=\"flex flex-row items-center  p-1.5 space-x-2 bg-white w-full\"\r\n              onClick={() => handleChangeTheme()}\r\n            >\r\n              <div className=\"h-6 w-6 bg-indigo-500\"></div>\r\n              <div>Indigo</div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"my-6\">\r\n        <div className=\"text-xl font-semibold my-6 text-gray-600\">\r\n          Data Management\r\n        </div>\r\n        <p className=\"my-4 text-gray-600\">* TO DO *</p>\r\n        <p className=\"mt-4 text-gray-600\">\r\n          * This section suppose to be user settings regarding how they want\r\n          their data to be stored *\r\n        </p>\r\n        <ul className=\"mb-4 text-gray-600\">\r\n          <li>- Local storage </li>\r\n          <li>- Remote storage (database) / Sign up required</li>\r\n        </ul>\r\n        <p className=\"mb-4 mt-6 \">\r\n          Clear localStorage data, useful in development phase, will be removed\r\n          in production.\r\n        </p>\r\n        <button\r\n          className=\"p-2 text-white bg-indigo-500 rounded\"\r\n          onClick={() => {\r\n            setTransactions([]);\r\n            setStocks([]);\r\n          }}\r\n        >\r\n          Clear Stored Data\r\n        </button>\r\n      </div>*/}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\ModalLayout.js",["162"],"import React, { useContext, useEffect } from \"react\";\r\nimport { userContext } from \"../Contexts/UserContext\";\r\n\r\nexport default function ModalLayout({ children }) {\r\n  const { setModal } = useContext(userContext);\r\n  const closeOnESC = () => {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      if (e.key === \"Escape\") {\r\n        setModal();\r\n      }\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    closeOnESC();\r\n    return () => closeOnESC();\r\n  }, []);\r\n  return (\r\n    <div className=\"fixed top-0 w-full lg:pl-60 h-screen flex items-center justify-center bg-gray-400 bg-opacity-60 z-20\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Modal\\CreateTransaction.js",["163"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { useSuggestionInput } from \"react-hooks-web\";\r\nimport { AiFillCheckCircle, AiOutlineClose } from \"react-icons/ai\";\r\nimport { userContext } from \"../Contexts/UserContext\";\r\n\r\nconst FLOW = [\r\n  { title: \"Select Type\", component: (a) => <TransactionSelection {...a} /> },\r\n  { title: \"Select Products\", component: (a) => <ProductSelection {...a} /> },\r\n  { title: \"Overview\", component: (a) => <TransactionOverview {...a} /> },\r\n  { title: \"Complete\", component: (a) => <TransactionResult {...a} /> },\r\n];\r\n\r\nexport default function CreateTransaction() {\r\n  const {\r\n    stocks,\r\n    setStocks,\r\n    setTransactions,\r\n    storeProducts,\r\n    setModal,\r\n  } = useContext(userContext);\r\n\r\n  const [transactionType, setTransactionType] = useState({\r\n    name: null,\r\n    flow: null,\r\n  });\r\n\r\n  //const [transactionUser, setTransactionUser] = useState(() => ({\r\n  //  name: \"\",\r\n  //  sid: \"\",\r\n  //}));\r\n\r\n  const [transactionProducts, setTransactionProducts] = useState([]);\r\n\r\n  const [transactionStatus, setTransactionStatus] = useState({\r\n    isDn: true,\r\n    completed: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!transactionType.name) {\r\n      setTransactionProducts([]);\r\n      //setTransactionUser({\r\n      //  name: \"\",\r\n      //  sid: \"\",\r\n      //});\r\n    }\r\n  }, [transactionType]);\r\n  //selection -> user detail? -> product selection -> overview -> end\r\n\r\n  //const TransactionUser = (\r\n  //  <div className=\"flex flex-col mt-6\">\r\n  //    <label className=\"mb-2\">Name</label>\r\n  //    <div className=\"w-full relative\">\r\n  //      <input\r\n  //        onKeyPress={(e) =>\r\n  //          (e.charCode >= 65 && e.charCode <= 90) ||\r\n  //          (e.charCode >= 97 && e.charCode <= 122)\r\n  //        }\r\n  //        key=\"name\"\r\n  //        className=\"mb-4 w-full p-2 rounded border-1 bg-gray-100 h-10\"\r\n  //        name=\"name\"\r\n  //        type=\"text\"\r\n  //        autoComplete=\"off\"\r\n  //        onChange={(e) => {\r\n  //          if (\r\n  //            e.target.value.length === 0 ||\r\n  //            /^[a-zA-Z ]+$/.test(e.target.value)\r\n  //          ) {\r\n  //            setTransactionUser((p) => ({ ...p, name: e.target.value }));\r\n  //          }\r\n  //        }}\r\n  //        value={transactionUser.name}\r\n  //      />\r\n  //    </div>\r\n  //    <label className=\"mb-2\">SID</label>\r\n  //    <input\r\n  //      key=\"sid\"\r\n  //      className=\"mb-4 w-full p-2 rounded border-1 bg-gray-100 h-10\"\r\n  //      name=\"sid\"\r\n  //      type=\"number\"\r\n  //      onKeyDown={(e) => {\r\n  //        if (e.key === \"e\") {\r\n  //          e.stopPropagation();\r\n  //          return;\r\n  //        }\r\n  //      }}\r\n  //      //pattern=\"[0-9]\"\r\n  //      autoComplete=\"off\"\r\n  //      onChange={(e) => {\r\n  //        const text = e.target.value;\r\n  //        const restrictedChar = [\".\", \"e\", \"-\", \"+\", \"*\", \"/\"];\r\n  //        let badInput = 0;\r\n  //        restrictedChar.forEach((r) => {\r\n  //          if (text.includes(r)) {\r\n  //            badInput += 1;\r\n  //          }\r\n  //        });\r\n  //        if (badInput === 0) {\r\n  //          setTransactionUser((p) => ({ ...p, sid: text }));\r\n  //        }\r\n  //      }}\r\n  //      value={transactionUser.sid}\r\n  //    />\r\n  //  </div>\r\n  //);\r\n\r\n  //const RenderTransaction = (t) => {\r\n  //const current = TRANSACTION_TYPE.filter((f) => f.type === t.name)[0];\r\n  //let progress = [];\r\n  //let i = 0;\r\n  //if (current) {\r\n  //  for (i = 0; i < current.components.length - 1; i++) {\r\n  //    progress.push(i <= t.flow);\r\n  //  }\r\n  //}\r\n  //return <TransactionSelection />;\r\n  //!t.name ? (\r\n  //  <TransactionSelection />\r\n  //) : (\r\n  //  <div className=\"\">\r\n  //    <div className=\"flex flex-row justify-between items-center pb-3 border-b\">\r\n  //      <div className=\"font-semibold text-lg\">{current.title}</div>\r\n  //      <button className=\"text-2xl\" onClick={() => setModal()}>\r\n  //        <AiOutlineClose className=\"text-lg\" />\r\n  //      </button>\r\n  //    </div>\r\n  //    {current[\"components\"][t.flow]}\r\n\r\n  //    <div\r\n  //      className={`flex flex-row items-center pt-3 ${\r\n  //        current.components.length - 1 === t.flow\r\n  //          ? \"justify-center\"\r\n  //          : \"justify-between\"\r\n  //      }`}\r\n  //    >\r\n  //      {current.components.length - 1 !== t.flow && (\r\n  //        <button\r\n  //          className=\"px-4 py-2 rounded bg-gray-200\"\r\n  //          onClick={() =>\r\n  //            setTransactionType((prev) => {\r\n  //              if (t.flow === 0) {\r\n  //                return { ...prev, name: null };\r\n  //              }\r\n  //              return { ...prev, flow: prev.flow - 1 };\r\n  //            })\r\n  //          }\r\n  //        >\r\n  //          Back\r\n  //        </button>\r\n  //      )}\r\n  //      {t.flow !== current.components.length - 1 && (\r\n  //        <div className=\"flex flex-row space-x-2\">\r\n  //          {progress.map((p, i) => (\r\n  //            <div\r\n  //              key={i}\r\n  //              className={`rounded-full h-2 w-2 ${\r\n  //                p ? \"bg-indigo-500\" : \"bg-gray-400\"\r\n  //              }`}\r\n  //            ></div>\r\n  //          ))}\r\n  //        </div>\r\n  //      )}\r\n  //      {t.flow === current.components.length - 2 ? (\r\n  //        <button\r\n  //          className=\"px-4 py-2 rounded bg-indigo-500 text-white\"\r\n  //          onClick={() => {\r\n  //            const newTransaction = {\r\n  //              id: v4(),\r\n  //              type: t.name,\r\n  //              items: transactionProducts,\r\n  //              data: {\r\n  //                isDn: transactionStatus.isDn,\r\n  //                ...transactionProducts.reduce(\r\n  //                  (a, b) => ({\r\n  //                    uv: a.uv + b[\"srp\"][\"uv\"] * b.count,\r\n  //                    pv: a.pv + b[\"srp\"][\"pv\"] * b.count,\r\n  //                    dn: a.dn + b[\"dn\"][\"price\"] * b.count,\r\n  //                    srp: a.srp + b[\"srp\"][\"price\"] * b.count,\r\n  //                  }),\r\n  //                  { uv: 0, pv: 0, dn: 0, srp: 0 }\r\n  //                ),\r\n  //              },\r\n  //              target:\r\n  //                t.name === \"STOCK_IN\"\r\n  //                  ? { name: \"shaklee\", sid: \"-\" }\r\n  //                  : t.name === \"STOCK_OUT\"\r\n  //                  ? { name: \"sales\", sid: \"-\" }\r\n  //                  : transactionUser,\r\n  //              isCompleted: transactionStatus.completed,\r\n  //              createdAt: new Date(),\r\n  //            };\r\n  //            setTransactions((p) => {\r\n  //              p.push(newTransaction);\r\n  //              return p;\r\n  //            });\r\n  //            setStocks((s) =>\r\n  //              transactionProducts.reduce(\r\n  //                (\r\n  //                  c,\r\n  //                  { product_no, count, images, name, tags, dn, srp, pcat }\r\n  //                ) => {\r\n  //                  const dataToStore = {\r\n  //                    product_no,\r\n  //                    count,\r\n  //                    images,\r\n  //                    name,\r\n  //                    tags,\r\n  //                    dn,\r\n  //                    srp,\r\n  //                    pcat,\r\n  //                  };\r\n  //                  const matchItem = stocks.filter(\r\n  //                    (t) => t.product_no === product_no\r\n  //                  );\r\n  //                  const isMatch = matchItem.length > 0;\r\n  //                  if (isMatch) {\r\n  //                    if (t.name === \"STOCK_IN\" || t.name === \"TRANSFER_IN\") {\r\n  //                      return c.map((e) =>\r\n  //                        e.product_no === product_no\r\n  //                          ? { ...e, count: e.count + count }\r\n  //                          : e\r\n  //                      );\r\n  //                    }\r\n  //                    // This 'else' targets STOCK_OUT & TRANSFER_OUT\r\n  //                    else {\r\n  //                      if (matchItem[0].count - count <= 0) {\r\n  //                        return c.filter((e) => e.product_no !== product_no);\r\n  //                      } else {\r\n  //                        return c.map((e) =>\r\n  //                          e.product_no === product_no\r\n  //                            ? { ...e, count: e.count - count }\r\n  //                            : e\r\n  //                        );\r\n  //                      }\r\n  //                    }\r\n  //                  } else {\r\n  //                    c.push(dataToStore);\r\n  //                    return c;\r\n  //                  }\r\n  //                },\r\n  //                s\r\n  //              )\r\n  //            );\r\n  //            setTransactionType((prev) => ({\r\n  //              ...prev,\r\n  //              flow: prev.flow + 1,\r\n  //            }));\r\n  //          }}\r\n  //        >\r\n  //          Create\r\n  //        </button>\r\n  //      ) : current.components.length - 1 === t.flow ? (\r\n  //        <button\r\n  //          className=\"px-4 py-2 rounded bg-indigo-500 text-white\"\r\n  //          onClick={() => {\r\n  //            setModal();\r\n  //          }}\r\n  //        >\r\n  //          Close\r\n  //        </button>\r\n  //      ) : (\r\n  //        <button\r\n  //          className=\"px-4 py-2 rounded bg-indigo-500 text-white\"\r\n  //          onClick={() => {\r\n  //            if (\r\n  //              (current.isUserRequired &&\r\n  //                current.components.length - 4 === t.flow &&\r\n  //                transactionUser.name.length > 0) ||\r\n  //              (current.components.length - 3 === t.flow &&\r\n  //                transactionProducts.length > 0) ||\r\n  //              current.components.length - 2 === t.flow\r\n  //            ) {\r\n  //              setTransactionType((prev) => ({\r\n  //                ...prev,\r\n  //                flow: prev.flow + 1,\r\n  //              }));\r\n  //            }\r\n  //          }}\r\n  //        >\r\n  //          Next\r\n  //        </button>\r\n  //      )}\r\n  //    </div>\r\n  //  </div>\r\n  //);\r\n  //};\r\n\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(FLOW[0]);\r\n\r\n  const nextPage = () => {\r\n    setPageIndex((prev) => (prev > FLOW.length - 2 ? prev : prev + 1));\r\n  };\r\n\r\n  const previousPage = () => {\r\n    setPageIndex((prev) => (prev > 0 ? prev - 1 : prev));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(FLOW[pageIndex]);\r\n  }, [pageIndex]);\r\n\r\n  return (\r\n    <div\r\n      className=\" rounded shadow-lg modal-y-boundary  bg-white  mb-16 w-full mx-auto max-w-md sm:max-w-xl md:max-w-2xl xl:max-w-4xl 2xl:max-w-6xl\"\r\n      onClick={() => {\r\n        //setModal();\r\n      }}\r\n    >\r\n      <div className=\"flex flex-row justify-between items-center py-4 px-6  border-b\">\r\n        <div className=\"font-semibold text-lg\">{currentPage.title}</div>\r\n        <button className=\"text-2xl\" onClick={() => setModal()}>\r\n          <AiOutlineClose className=\"text-lg\" />\r\n        </button>\r\n      </div>\r\n      <div className=\"p-6\">\r\n        {currentPage.component({\r\n          setModal,\r\n          nextPage,\r\n          previousPage,\r\n          stocks,\r\n          setStocks,\r\n          setTransactionType,\r\n          transactionType,\r\n          storeProducts,\r\n          transactionProducts,\r\n          setTransactionProducts,\r\n          transactionStatus,\r\n          setTransactionStatus,\r\n          setTransactions,\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst TransactionSelection = ({ stocks, setTransactionType, nextPage }) => {\r\n  const TRANSACTION_TYPE = [\r\n    //{\r\n    //  isUserRequired: true,\r\n    //  selection: true,\r\n    //  type: \"TRANSFER_IN\",\r\n    //  components: [\r\n    //    TransactionUser,\r\n    //    <ProductSelection />,\r\n    //    <TransactionOverview />,\r\n    //    <TransactionResult />,\r\n    //  ],\r\n    //  title: \"Transfer In\",\r\n    //  description: \"Buy products from Upline (Receiving the UV/PV)\",\r\n    //},\r\n    //{\r\n    //  isUserRequired: true,\r\n    //  selection: true,\r\n    //  type: \"TRANSFER_OUT\",\r\n    //  components: [\r\n    //    TransactionUser,\r\n    //    <ProductSelection />,\r\n    //    <TransactionOverview />,\r\n    //    <TransactionResult />,\r\n    //  ],\r\n    //  title: \"Transfer Out\",\r\n    //  description: \"Sell products to Downline (Transafering the UV/PV)\",\r\n    //},\r\n    {\r\n      isUserRequired: false,\r\n      selection: true,\r\n      type: \"STOCK_IN\",\r\n      components: [\r\n        //<ProductSelection />,\r\n        //<TransactionOverview />,\r\n        //<TransactionResult />,\r\n      ],\r\n      title: \"Stock In\",\r\n      description: \"Add products to your inventory\",\r\n    },\r\n    {\r\n      isUserRequired: false,\r\n      selection: true,\r\n      type: \"STOCK_OUT\",\r\n      components: [\r\n        //<ProductSelection />,\r\n        //<TransactionOverview />,\r\n        //<TransactionResult />,\r\n      ],\r\n      title: \"Stock Out\",\r\n      description: \"Remove products from your inventory\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 gap-4  md:grid-cols-2\">\r\n      {TRANSACTION_TYPE.filter((r) => r.selection).map((t, i) => {\r\n        const outNotAvailable = stocks.length === 0;\r\n\r\n        return (\r\n          <button\r\n            key={i}\r\n            className=\"p-4 rounded border block h-full disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            disabled={\r\n              outNotAvailable &&\r\n              (t.type === \"TRANSFER_OUT\" || t.type === \"STOCK_OUT\")\r\n            }\r\n            data-type={t.type}\r\n            onClick={(e) => {\r\n              setTransactionType(e.currentTarget.dataset.type);\r\n              nextPage();\r\n            }}\r\n          >\r\n            <div className=\"font-semibold text-lg\">{t.title}</div>\r\n            <div className=\"\">{t.description}</div>\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TransactionOverview = ({\r\n  transactionProducts,\r\n  nextPage,\r\n  previousPage,\r\n  transactionStatus,\r\n  setTransactionStatus,\r\n  transactionType,\r\n  setTransactions,\r\n  stocks,\r\n  setStocks,\r\n}) => {\r\n  if (transactionProducts.length === 0) {\r\n    previousPage();\r\n  }\r\n\r\n  const [stats, setStats] = useState({ dn: 0, srp: 0, uv: 0, pv: 0 });\r\n  useEffect(() => {\r\n    setStats(\r\n      transactionProducts.reduce(\r\n        (a, b) => ({\r\n          dn: a.dn + (b.dn?.price || 0) * b.count,\r\n          srp: a.srp + (b.srp?.price || b.dn?.price || 0) * b.count,\r\n          uv: a.uv + (b.dn?.uv || 0) * b.count,\r\n          pv: a.pv + (b.dn?.pv || 0) * b.count,\r\n        }),\r\n        { dn: 0, srp: 0, uv: 0, pv: 0 }\r\n      )\r\n    );\r\n  }, [transactionStatus.isDn]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid grid-cols-4 md:grid-cols-6 gap-4 max-h-48 overflow-y-scroll my-4\">\r\n        {transactionProducts.map((p) => (\r\n          <div key={p.product_no} className=\"relative\">\r\n            <img src={p.images[0]} alt={p.name} />\r\n            <div className=\"absolute flex justify-end items-end top-0 left-0 w-full h-full bg-black bg-opacity-10 \">\r\n              <div className=\"flex right-0 bottom-0 rounded-tl-lg text-xs px-2 py-1  bg-indigo-500 text-white\">\r\n                x{p.count}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <label\r\n        htmlFor=\"useDn\"\r\n        className=\"flex flex-row items-center hover:cursor-pointer\"\r\n      >\r\n        Use Member Price?\r\n        {/*<div\r\n          className={`ml-2 border rounded h-4 w-4 flex items-center justify-center ${\r\n            transactionStatus.isDn\r\n              ? \"bg-indigo-500 border-indigo-500\"\r\n              : \"border-gray-300\"\r\n          }`}\r\n        >\r\n          {transactionStatus.isDn && (\r\n            <AiOutlineCheck\r\n              className={`text-xs text-white ${\r\n                !transactionStatus.isDn ? \"hidden\" : \"\"\r\n              }`}\r\n            />\r\n          )}\r\n        </div>*/}\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"useDn\"\r\n          checked={transactionStatus.isDn}\r\n          name=\"use_member\"\r\n          onChange={() =>\r\n            setTransactionStatus((p) => ({ ...p, isDn: !p.isDn }))\r\n          }\r\n        />\r\n        <div\r\n          className={`ml-2  border  rounded h-4 w-4 ${\r\n            transactionStatus.isDn\r\n              ? \"bg-indigo-500 border-indigo-500\"\r\n              : \"border-gray-300\"\r\n          }`}\r\n        ></div>\r\n      </label>\r\n\r\n      {/*<label\r\n        htmlFor=\"completed\"\r\n        className=\"flex flex-row items-center hover:cursor-pointer\"\r\n      >\r\n        Completed?\r\n        <div\r\n          className={`ml-2 border rounded h-4 w-4 flex items-center justify-center ${\r\n            transactionStatus.completed\r\n              ? \"bg-indigo-500 border-indigo-500\"\r\n              : \"border-gray-300\"\r\n          }`}\r\n        >\r\n          {transactionStatus.completed && (\r\n            <AiOutlineCheck\r\n              className={`text-xs text-white ${\r\n                !transactionStatus.completed ? \"hidden\" : \"\"\r\n              }`}\r\n            />\r\n          )}\r\n        </div>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"completed\"\r\n          checked={transactionStatus.completed}\r\n          name=\"completed\"\r\n          onChange={() =>\r\n            setTransactionStatus((s) => ({ ...s, completed: !s.completed }))\r\n          }\r\n        />\r\n        <div\r\n          className={`ml-2  border  rounded h-4 w-4 ${\r\n            transactionStatus.completed\r\n              ? \"bg-indigo-500 border-indigo-500\"\r\n              : \"border-gray-300\"\r\n          }`}\r\n        ></div>\r\n      </label>\r\n*/}\r\n      <div className=\"my-4\">\r\n        <div className=\"flex flex-row justify-between items-center\">\r\n          <div className=\" text-gray-500 text\">UV</div>\r\n          <div className=\" text-black text-lg\">{`${stats.uv} UV`}</div>\r\n        </div>\r\n        <div className=\"flex flex-row justify-between items-center\">\r\n          <div className=\" text-gray-500 text\">PV</div>\r\n          <div className=\" text-black text-lg\">{`${stats.pv} PV`}</div>\r\n        </div>\r\n        <div className=\"flex flex-row justify-between items-center\">\r\n          <div className=\" text-gray-500 text\">\r\n            {transactionStatus.isDn ? \"Member Price\" : \"Retail Price\"}\r\n          </div>\r\n          <div className=\"text-black text-lg\">\r\n            {`RM ${transactionStatus.isDn ? stats.dn : stats.srp}`}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-full flex flex-row items-center pt-3 justify-between\">\r\n        <button\r\n          className=\"px-4 py-2 rounded bg-gray-200\"\r\n          onClick={() => previousPage()}\r\n        >\r\n          Back\r\n        </button>\r\n        <button\r\n          className=\"px-4 py-2 rounded bg-indigo-500 text-white\"\r\n          onClick={() => {\r\n            const newTransaction = {\r\n              id: v4(),\r\n              type: transactionType,\r\n              items: transactionProducts,\r\n              data: {\r\n                isDn: transactionStatus.isDn,\r\n                ...transactionProducts.reduce(\r\n                  (a, b) => ({\r\n                    uv: a.uv + (b.srp?.uv || 0) * b.count,\r\n                    pv: a.pv + (b.srp?.pv || 0) * b.count,\r\n                    dn: a.dn + (b.dn?.price || 0) * b.count,\r\n                    srp: a.srp + (b.srp?.price || 0) * b.count,\r\n                  }),\r\n                  { uv: 0, pv: 0, dn: 0, srp: 0 }\r\n                ),\r\n              },\r\n              //target:\r\n              //  transactionType === \"STOCK_IN\"\r\n              //    ? { name: \"shaklee\", sid: \"-\" }\r\n              //    : transactionType === \"STOCK_OUT\"\r\n              //    ? { name: \"sales\", sid: \"-\" }\r\n              //    : transactionUser,\r\n              //isCompleted: transactionStatus.completed,\r\n              createdAt: new Date(),\r\n            };\r\n            setTransactions((p) => {\r\n              p.push(newTransaction);\r\n              return p;\r\n            });\r\n            setStocks((s) =>\r\n              transactionProducts.reduce(\r\n                (\r\n                  c,\r\n                  { product_no, count, images, name, tags, dn, srp, pcat }\r\n                ) => {\r\n                  const dataToStore = {\r\n                    product_no,\r\n                    count,\r\n                    images,\r\n                    name,\r\n                    tags,\r\n                    dn,\r\n                    srp,\r\n                    pcat,\r\n                  };\r\n                  const matchItem = stocks.filter(\r\n                    (t) => t.product_no === product_no\r\n                  );\r\n                  const isMatch = matchItem.length > 0;\r\n                  if (isMatch) {\r\n                    if (\r\n                      transactionType === \"STOCK_IN\" ||\r\n                      transactionType === \"TRANSFER_IN\"\r\n                    ) {\r\n                      return c.map((e) =>\r\n                        e.product_no === product_no\r\n                          ? { ...e, count: e.count + count }\r\n                          : e\r\n                      );\r\n                    }\r\n                    // This 'else' targets STOCK_OUT & TRANSFER_OUT\r\n                    else {\r\n                      if (matchItem[0].count - count <= 0) {\r\n                        return c.filter((e) => e.product_no !== product_no);\r\n                      } else {\r\n                        return c.map((e) =>\r\n                          e.product_no === product_no\r\n                            ? { ...e, count: e.count - count }\r\n                            : e\r\n                        );\r\n                      }\r\n                    }\r\n                  } else {\r\n                    c.push(dataToStore);\r\n                    return c;\r\n                  }\r\n                },\r\n                s\r\n              )\r\n            );\r\n            nextPage();\r\n          }}\r\n        >\r\n          Create\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TransactionResult = ({ setModal }) => {\r\n  return (\r\n    <>\r\n      <div className=\"flex flex-col items-center justify-center w-full my-6\">\r\n        <div className=\"text-3xl\">Successful!</div>\r\n        <AiFillCheckCircle className=\"text-5xl text-green-400 my-6\" />\r\n        <div>{`Transaction has been added!`}</div>\r\n      </div>\r\n      <div className=\"w-full flex flex-row items-center pt-3 justify-center\">\r\n        <button\r\n          className=\"px-4 py-2 rounded bg-gray-200\"\r\n          onClick={() => setModal()}\r\n        >\r\n          Close\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ProductSelection = ({\r\n  nextPage,\r\n  previousPage,\r\n  transactionType,\r\n  stocks,\r\n  storeProducts,\r\n  transactionProducts,\r\n  setTransactionProducts,\r\n}) => {\r\n  const listToFilter =\r\n    transactionType === \"STOCK_IN\" || transactionType === \"TRANSFER_IN\"\r\n      ? storeProducts\r\n      : stocks;\r\n\r\n  const addProductsToTransaction = (p) => {\r\n    const { product_no } = p;\r\n    const target = transactionProducts.filter(\r\n      (q) => q.product_no === product_no\r\n    )[0];\r\n    if (\r\n      target &&\r\n      target.count ===\r\n        stocks.filter((r) => r.product_no === product_no)[0]?.[\"count\"]\r\n    ) {\r\n      return;\r\n    } else {\r\n      setTransactionProducts((prev) => {\r\n        if (prev.filter((t) => t.product_no === product_no).length > 0) {\r\n          return transactionProducts.map((t) =>\r\n            t.product_no === product_no ? { ...t, count: t.count + 1 } : t\r\n          );\r\n        }\r\n        return [...prev, { ...p, count: 1 }];\r\n      });\r\n    }\r\n  };\r\n\r\n  const {\r\n    state: filterState,\r\n    onChange: filterOnChange,\r\n    onKeyDown: filterOnKeyDown,\r\n  } = useSuggestionInput(\r\n    {\r\n      suggestions: listToFilter.map((s) => ({\r\n        ...s,\r\n        suggestionName: s.name,\r\n        suggestionTag: s.tags.join(\"\").toLowerCase(),\r\n      })),\r\n      keys: [\"suggestionName\", \"suggestionTag\"],\r\n    },\r\n    addProductsToTransaction\r\n  );\r\n\r\n  const [tempHide, setTempHide] = useState(false);\r\n  useEffect(() => {\r\n    setTempHide(false);\r\n  }, [filterState.userInput]);\r\n  return (\r\n    <div>\r\n      <div className=\"relative flex flex-col \">\r\n        <label className=\"my-2\">Select Products</label>\r\n        <input\r\n          className=\"mb-4 w-full p-2 rounded border-1 bg-gray-100 h-10\"\r\n          type=\"text\"\r\n          placeholder=\"E.g. Vivix/Omega/promotion \"\r\n          value={filterState.userInput}\r\n          onChange={(e) => {\r\n            filterOnChange(e);\r\n          }}\r\n          onKeyDown={(e) => {\r\n            e.stopPropagation();\r\n            filterOnKeyDown(e);\r\n            if (e.key === \"Enter\") {\r\n              setTempHide(true);\r\n            }\r\n          }}\r\n        />\r\n\r\n        {!tempHide &&\r\n          filterState.showSuggestions &&\r\n          filterState.userInput.length > 0 && (\r\n            <div className=\"absolute top-20 shadow border rounded w-full bg-white z-10 max-h-80 overflow-y-scroll\">\r\n              {filterState.filteredSuggestions.slice(0, 8).map((f, i) => (\r\n                <button\r\n                  className={`block w-full p-2 overflow-hidden ${\r\n                    filterState.activeSuggestion === i ? \"bg-gray-100\" : \"\"\r\n                  }`}\r\n                  key={i}\r\n                  data-index={i}\r\n                  onClick={(e) => {\r\n                    addProductsToTransaction(\r\n                      filterState.filteredSuggestions[\r\n                        e.currentTarget.dataset.index\r\n                      ]\r\n                    );\r\n                    setTempHide(true);\r\n                  }}\r\n                >\r\n                  <div className=\"flex flex-row justify-between items-center\">\r\n                    <div className=\"w-16 rounded-full\">\r\n                      <img src={f.images[0]} alt={f.name} />\r\n                    </div>\r\n                    <div className=\"flex-grow\">{f.name}</div>\r\n                  </div>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          )}\r\n      </div>\r\n      {transactionProducts.length > 0 && (\r\n        <div className=\"flex flex-col space-y-3 my-4 max-h-72 overflow-y-scroll\">\r\n          {transactionProducts.map((p) => (\r\n            <div\r\n              key={p.product_no}\r\n              className=\"flex flex-row justify-between items-center\"\r\n            >\r\n              <div className=\"flex items-center\">\r\n                <div className=\"w-12\">\r\n                  <img src={p.images[0]} alt={p.name} />\r\n                </div>\r\n                <div className=\"pl-2\">{p.name}</div>\r\n              </div>\r\n              <div className=\"flex flex-row items-center\">\r\n                <button\r\n                  className=\"rounded bg-indigo-500 text-white w-6 h-6\"\r\n                  data-pid={p.product_no}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    setTransactionProducts((r) =>\r\n                      r\r\n                        .map((q) =>\r\n                          q.product_no === e.target.dataset.pid\r\n                            ? q.count !== 1\r\n                              ? { ...q, count: q.count - 1 }\r\n                              : null\r\n                            : q\r\n                        )\r\n                        .filter((r) => r)\r\n                    );\r\n                  }}\r\n                >\r\n                  -\r\n                </button>\r\n                <div className=\"w-10 text-center\">{p.count}</div>\r\n                <button\r\n                  className=\"rounded bg-indigo-500 text-white w-6 h-6\"\r\n                  data-pid={p.product_no}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    setTransactionProducts((r) =>\r\n                      r.map((q) => {\r\n                        if (q.product_no === e.target.dataset.pid) {\r\n                          if (\r\n                            // Outgoing Product\r\n                            (transactionType === \"TRANSFER_OUT\" ||\r\n                              transactionType === \"STOCK_OUT\") &&\r\n                            q.count ===\r\n                              stocks.filter(\r\n                                (s) => s.product_no === q.product_no\r\n                              )[0][\"count\"]\r\n                          ) {\r\n                            return q;\r\n                          }\r\n                          return { ...q, count: q.count + 1 };\r\n                        }\r\n                        return q;\r\n                      })\r\n                    );\r\n                  }}\r\n                >\r\n                  +\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n      <div className=\"w-full flex flex-row items-center pt-3 justify-between\">\r\n        <button\r\n          className=\"px-4 py-2 rounded bg-gray-200\"\r\n          onClick={() => previousPage()}\r\n        >\r\n          Back\r\n        </button>\r\n        <button\r\n          disabled={transactionProducts.length < 1}\r\n          className=\"px-4 py-2 rounded bg-indigo-500 text-white disabled:opacity-50 disabled:cursor-not-allowed\"\r\n          onClick={() => {\r\n            if (transactionProducts.length < 1) {\r\n              alert(\"Please select at least 1 product!\");\r\n              return;\r\n            }\r\n            nextPage();\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Modal\\StockDisplay.js",[],["164","165"],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\FavouriteButton.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Modal\\ProductDisplay.js",["166","167"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { AiOutlineClose, AiOutlineSafety } from \"react-icons/ai\";\r\nimport Loading from \"../Components/Loading\";\r\nimport PriceBar from \"../Components/PriceBar\";\r\nimport { userContext } from \"../Contexts/UserContext\";\r\n\r\nexport default function ProductDisplay({ prod_no }) {\r\n  const { storeProducts, setModal, stocks } = useContext(userContext);\r\n  const [displayLoading, setDisplayLoading] = useState(true);\r\n  const [currentProduct, setCurrentProduct] = useState({});\r\n  const currentStock = useRef([]);\r\n  useEffect(() => {\r\n    setDisplayLoading(true);\r\n    setCurrentProduct(storeProducts.filter((s) => s.product_no === prod_no)[0]);\r\n    currentStock.current = stocks.filter((s) => s.product_no === prod_no);\r\n    currentStock.current.length > 0 &&\r\n      setCurrentProduct((p) => ({\r\n        ...p,\r\n        count: currentStock.current[0][\"count\"],\r\n      }));\r\n    setDisplayLoading(false);\r\n  }, []);\r\n  return (\r\n    <div\r\n      className=\"rounded shadow-lg modal-y-boundary bg-white w-full mx-auto max-w-md sm:max-w-xl md:max-w-2xl xl:max-w-4xl 2xl:max-w-6xl\"\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n      }}\r\n    >\r\n      <div className=\"flex items-center justify-between w-full py-4 px-6 border-b\">\r\n        <div className=\"truncate\">{currentProduct[\"name\"] || \"\"}</div>\r\n        <button onClick={() => setModal()}>\r\n          <AiOutlineClose />\r\n        </button>\r\n      </div>\r\n      {displayLoading ? (\r\n        <Loading parentClassName=\"my-12\" />\r\n      ) : (\r\n        <div\r\n          className=\"overflow-y-auto flex flex-col items-center md:grid md:grid-cols-6 md:gap-12 w-full\"\r\n          style={{ maxHeight: \"70vh\" }}\r\n        >\r\n          {/*<img loading=\"lazy\" src={s.images[0]} alt={s.name} />\r\n           */}\r\n          {/*<div className=\"relative h-52 w-full md:col-span-2\">\r\n            <div\r\n              className=\"w-full h-full bg-center bg-no-repeat bg-contain\"\r\n              style={{ backgroundImage: `url(${currentProduct.images[0]})` }}\r\n            ></div>\r\n          </div>*/}\r\n          <div className=\"h-48 md:h-auto w-full md:col-span-3 p-6\">\r\n            <img\r\n              className=\"w-1/2 mx-auto md:w-full h-auto\"\r\n              src={currentProduct[\"images\"][0]}\r\n              alt={currentProduct[\"name\"]}\r\n              loading=\"lazy\"\r\n            />\r\n          </div>\r\n          <div className=\" p-6 md:col-span-3 flex flex-col items-center w-full h-full md:w-full md:justify-between\">\r\n            <div>\r\n              {currentProduct.count && (\r\n                <div className=\"my-2\">\r\n                  You currently have{\" \"}\r\n                  {\r\n                    <span className=\"font-semibold\">\r\n                      {currentProduct.count}\r\n                    </span>\r\n                  }{\" \"}\r\n                  of this.\r\n                </div>\r\n              )}\r\n            </div>\r\n            {\r\n              <PriceBar\r\n                dn={currentProduct.dn.price}\r\n                srp={currentProduct.srp?.price || null}\r\n              />\r\n            }\r\n            <div className=\"flex flex-row justify-between items-center w-full my-4 md:my-6\">\r\n              <div></div>\r\n              <div className=\"flex flex-col items-center space-y-2\">\r\n                <AiOutlineSafety className=\"text-3xl text-gray-600\" />\r\n                <div>{`${currentProduct.dn.uv} UV`}</div>\r\n              </div>\r\n              <div className=\"w-px h-11 bg-gray-400\"></div>\r\n              <div className=\"flex flex-col items-center space-y-2\">\r\n                <AiOutlineSafety className=\"text-3xl text-gray-600\" />\r\n                <div>{`${currentProduct.dn.pv} PV`}</div>\r\n              </div>\r\n              <div></div>\r\n            </div>\r\n            <div className=\"flex w-full mx-0\">\r\n              <a\r\n                target=\"_blank\"\r\n                href={`https://shaklee.com.my/products/${currentProduct.pcat}/${currentProduct.product_no}`}\r\n                className=\"w-full text-center bg-indigo-500 px-3 py-2 text-white rounded\"\r\n              >\r\n                Visit Website\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\productStatus.js",[],["168","169"],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Modal\\TransactionDisplay.js",["170","171","172"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  AiOutlineCheck,\r\n  AiOutlineClose,\r\n  AiOutlineDollar,\r\n  AiOutlineSafety,\r\n} from \"react-icons/ai\";\r\nimport Loading from \"../Components/Loading\";\r\nimport { userContext } from \"../Contexts/UserContext\";\r\n\r\nexport default function TransactionDisplay({ transaction }) {\r\n  const { setModal, transactions, setTransactions, stocks } = useContext(\r\n    userContext\r\n  );\r\n  const [displayLoading, setDisplayLoading] = useState(true);\r\n  const [editableTransaction] = useState(() => transaction);\r\n  useEffect(() => {\r\n    setDisplayLoading(false);\r\n  }, []);\r\n  /*\r\n    What can user do with edit?\r\n    -Add/remove product\r\n    -Add/minus amount\r\n    -Price (Member/Retail)\r\n\r\n    Flow 1:\r\n    1. Get the edited transaction\r\n    2. Virtually merged with the list of transactions\r\n    3. Iterate through list of transactions and generate the list of stocks\r\n    4. Filter the list of stocks to check validity\r\n\r\n    Flow 2:\r\n    1. Get the edited transaction\r\n    2. Compare to the un-edited transation to find out which product +/- amount\r\n       E.g. \r\n        [\r\n          {\r\n              product_no: 'P1001',\r\n              changes: +3\r\n            }\r\n          ]\r\n    3. Check validity with current list of stocks\r\n    4. If ok, then proceed\r\n*/\r\n\r\n  //const handleEditing = () => {\r\n  //  const newTransactions = transactions.map((t) => {\r\n  //    if (t.id === transaction.id) {\r\n  //      return editableTransaction;\r\n  //    }\r\n  //    return t;\r\n  //  });\r\n\r\n  //  // Or\r\n  //  // Check if new transaction is valid\r\n\r\n  //  setTransactions((prev) =>\r\n  //    prev.map((t) => {\r\n  //      if (t.id === transaction.id) {\r\n  //        return editableTransaction;\r\n  //      }\r\n  //      return t;\r\n  //    })\r\n  //  );\r\n  //  window.location.reload();\r\n  //};\r\n  return (\r\n    <div\r\n      className=\"rounded shadow-lg modal-y-boundary bg-white w-full mx-auto max-w-md sm:max-w-xl md:max-w-2xl xl:max-w-4xl 2xl:max-w-6xl\"\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n      }}\r\n    >\r\n      <div className=\"flex items-center justify-between w-full py-4 px-6 border-b\">\r\n        <div className=\"truncate\">Transaction Details</div>\r\n        <button onClick={() => setModal()}>\r\n          <AiOutlineClose />\r\n        </button>\r\n      </div>\r\n      {displayLoading ? (\r\n        <Loading parentClassName=\"my-32\" />\r\n      ) : (\r\n        <div\r\n          className=\"overflow-y-auto w-full p-6\"\r\n          style={{ maxHeight: \"70vh\" }}\r\n        >\r\n          {/*<div className=\"grid grid-cols-4 gap-4 max-h-48 overflow-y-scroll my-4\">\r\n            {editableTransaction.items.map((p) => (\r\n              <div key={p.product_no} className=\"relative\">\r\n                <img src={p.images[0]} alt={p.name} loading=\"lazy\" />\r\n                <div className=\"absolute top-0 w-full h-full left-0 z-10 bg-black bg-opacity-60 flex items-center justify-center text-white text-lg\">\r\n                  x{p.count}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>*/}\r\n          <div className=\"grid grid-cols-4 md:grid-cols-6 gap-4 max-h-48 overflow-y-scroll my-4\">\r\n            {editableTransaction.items.map((p) => (\r\n              <div key={p.product_no} className=\"relative\">\r\n                <img src={p.images[0]} alt={p.name} />\r\n                <div className=\"absolute flex justify-end items-end top-0 left-0 w-full h-full bg-black bg-opacity-10 \">\r\n                  <div className=\"flex right-0 bottom-0 rounded-tl-lg text-xs px-2 py-1  bg-indigo-400 text-white\">\r\n                    x{p.count}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {/*<label\r\n            htmlFor=\"useDn\"\r\n            className=\"flex items-center hover:cursor-pointer\"\r\n          >\r\n            <div>Use Member Price?</div>\r\n\r\n            <div\r\n              className={`ml-2 border rounded h-5 w-5 flex items-center justify-center ${\r\n                editableTransaction.data.isDn\r\n                  ? \"bg-indigo-400 border-indigo-400\"\r\n                  : \"border-gray-300\"\r\n              }`}\r\n            >\r\n              {editableTransaction.data.isDn && (\r\n                <AiOutlineCheck\r\n                  className={`text-xs text-white ${\r\n                    !editableTransaction.data.isDn ? \"hidden\" : \"\"\r\n                  }`}\r\n                />\r\n              )}\r\n            </div>\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"useDn\"\r\n              className=\"hidden\"\r\n              defaultChecked={editableTransaction.data.isDn}\r\n              name=\"use_member\"\r\n              onChange={() => {\r\n                setIsChanged(true);\r\n                setEditableTransaction((r) => {\r\n                  const data = { ...r.data, isDn: !r.data.isDn };\r\n                  return { ...r, data };\r\n                });\r\n              }}\r\n            />\r\n          </label>*/}\r\n          <div className=\"flex items-center justify-around my-6\">\r\n            <div className=\"flex items-center\">\r\n              {editableTransaction.data.isDn ? (\r\n                <>\r\n                  <AiOutlineCheck className=\"pr-2 text-4xl text-green-500\" />\r\n                  <div>Member Price</div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <AiOutlineClose className=\"pr-2 text-4xl text-red-500\" />\r\n                  <div>Retail Price</div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"my-6 flex flex-row justify-between items-center\">\r\n            <div></div>\r\n            <div\r\n              className=\"flex flex-col items-center space-y-2\"\r\n              style={{ minWidth: \"30%\" }}\r\n            >\r\n              <AiOutlineSafety className=\"text-3xl text-gray-600\" />\r\n              <div>{`${editableTransaction.data.uv} UV`}</div>\r\n            </div>\r\n            <div className=\"w-px h-11 bg-gray-400\"></div>\r\n            <div\r\n              className=\"flex flex-col items-center space-y-2\"\r\n              style={{ minWidth: \"30%\" }}\r\n            >\r\n              <AiOutlineSafety className=\"text-3xl text-gray-600\" />\r\n              <div>{`${editableTransaction.data.pv} PV`}</div>\r\n            </div>\r\n            <div className=\"w-px h-11 bg-gray-400\"></div>\r\n            <div\r\n              className=\"flex flex-col items-center space-y-2\"\r\n              style={{ minWidth: \"30%\" }}\r\n            >\r\n              <AiOutlineDollar className=\"text-3xl text-gray-600\" />\r\n              <div>\r\n                {`RM ${\r\n                  editableTransaction.data.isDn\r\n                    ? editableTransaction.data.dn\r\n                    : editableTransaction.data.srp\r\n                }`}\r\n              </div>\r\n            </div>\r\n            <div></div>\r\n          </div>\r\n          <button\r\n            onClick={() => setModal()}\r\n            className=\"flex w-full justify-center items-center rounded bg-gray-300  px-3 py-2\"\r\n          >\r\n            Close\r\n          </button>\r\n          {/*{isChanged && (\r\n          <div className=\"w-full flex justify-end space-x-3\">\r\n            <button\r\n              onClick={() => setModal()}\r\n              className=\"flex items-center rounded bg-gray-300  px-3 py-2\"\r\n            >\r\n              Cancel\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => handleEditing()}\r\n              className=\"flex items-center rounded bg-indigo-400 text-white px-3 py-2\"\r\n            >\r\n              Save Change\r\n            </button>\r\n          </div>\r\n        )}*/}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\Loading.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\TransactionTable.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\capitalize.js",[],["173","174"],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\isToday.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Components\\PriceBar.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\helper\\favSort.js",[],"C:\\Users\\ahjen\\Desktop\\New folder\\shaklee-transfer-assist\\src\\Pages.js\\Records.js",["175"],{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","severity":1,"message":"181","line":93,"column":6,"nodeType":"182","endLine":93,"endColumn":8,"suggestions":"183"},{"ruleId":"184","severity":1,"message":"185","line":1,"column":29,"nodeType":"186","messageId":"187","endLine":1,"endColumn":37},{"ruleId":"184","severity":1,"message":"188","line":10,"column":11,"nodeType":"186","messageId":"187","endLine":10,"endColumn":15},{"ruleId":"176","replacedBy":"189"},{"ruleId":"178","replacedBy":"190"},{"ruleId":"184","severity":1,"message":"191","line":10,"column":8,"nodeType":"186","messageId":"187","endLine":10,"endColumn":12},{"ruleId":"176","replacedBy":"192"},{"ruleId":"178","replacedBy":"193"},{"ruleId":"180","severity":1,"message":"194","line":54,"column":6,"nodeType":"182","endLine":54,"endColumn":8,"suggestions":"195"},{"ruleId":"180","severity":1,"message":"194","line":58,"column":6,"nodeType":"182","endLine":58,"endColumn":21,"suggestions":"196"},{"ruleId":"180","severity":1,"message":"197","line":88,"column":6,"nodeType":"182","endLine":88,"endColumn":12,"suggestions":"198"},{"ruleId":"180","severity":1,"message":"194","line":113,"column":6,"nodeType":"182","endLine":113,"endColumn":19,"suggestions":"199"},{"ruleId":"180","severity":1,"message":"200","line":37,"column":6,"nodeType":"182","endLine":37,"endColumn":8,"suggestions":"201"},{"ruleId":"180","severity":1,"message":"202","line":55,"column":6,"nodeType":"182","endLine":55,"endColumn":37,"suggestions":"203"},{"ruleId":"176","replacedBy":"204"},{"ruleId":"178","replacedBy":"205"},{"ruleId":"184","severity":1,"message":"185","line":1,"column":29,"nodeType":"186","messageId":"187","endLine":1,"endColumn":37},{"ruleId":"180","severity":1,"message":"206","line":16,"column":6,"nodeType":"182","endLine":16,"endColumn":8,"suggestions":"207"},{"ruleId":"180","severity":1,"message":"208","line":448,"column":6,"nodeType":"182","endLine":448,"endColumn":30,"suggestions":"209"},{"ruleId":"176","replacedBy":"210"},{"ruleId":"178","replacedBy":"211"},{"ruleId":"180","severity":1,"message":"212","line":22,"column":6,"nodeType":"182","endLine":22,"endColumn":8,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":93,"column":15,"nodeType":"216","endLine":97,"endColumn":16},{"ruleId":"176","replacedBy":"217"},{"ruleId":"178","replacedBy":"218"},{"ruleId":"184","severity":1,"message":"219","line":12,"column":21,"nodeType":"186","messageId":"187","endLine":12,"endColumn":33},{"ruleId":"184","severity":1,"message":"220","line":12,"column":35,"nodeType":"186","messageId":"187","endLine":12,"endColumn":50},{"ruleId":"184","severity":1,"message":"221","line":12,"column":52,"nodeType":"186","messageId":"187","endLine":12,"endColumn":58},{"ruleId":"176","replacedBy":"222"},{"ruleId":"178","replacedBy":"223"},{"ruleId":"180","severity":1,"message":"224","line":18,"column":6,"nodeType":"182","endLine":18,"endColumn":8,"suggestions":"225"},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkProduct'. Either include it or remove the dependency array.","ArrayExpression",["228"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.",["226"],["227"],"'logo' is defined but never used.",["226"],["227"],"React Hook useEffect has missing dependencies: 'favouriteProducts' and 'stocks'. Either include them or remove the dependency array.",["229"],["230"],"React Hook useEffect has missing dependencies: 'favouriteProducts', 'stockSearch', and 'stocks'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setResult' needs the current value of 'stockSearch'.",["231"],["232"],"React Hook useEffect has missing dependencies: 'favouriteProducts' and 'storeProducts'. Either include them or remove the dependency array.",["233"],"React Hook useEffect has missing dependencies: 'favouriteProducts', 'storeProducts', and 'storeState.filteredSuggestions'. Either include them or remove the dependency array.",["234"],["226"],["227"],"React Hook useEffect has a missing dependency: 'closeOnESC'. Either include it or remove the dependency array.",["235"],"React Hook useEffect has a missing dependency: 'transactionProducts'. Either include it or remove the dependency array. If 'setStats' needs the current value of 'transactionProducts', you can also switch to useReducer instead of useState and read 'transactionProducts' in the reducer.",["236"],["226"],["227"],"React Hook useEffect has missing dependencies: 'prod_no', 'stocks', and 'storeProducts'. Either include them or remove the dependency array. If 'setCurrentProduct' needs the current value of 'prod_no', you can also switch to useReducer instead of useState and read 'prod_no' in the reducer.",["237"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement",["226"],["227"],"'transactions' is assigned a value but never used.","'setTransactions' is assigned a value but never used.","'stocks' is assigned a value but never used.",["226"],["227"],"React Hook useEffect has a missing dependency: 'transactions'. Either include it or remove the dependency array.",["238"],"no-global-assign","no-unsafe-negation",{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},"Update the dependencies array to be: [checkProduct]",{"range":"261","text":"262"},"Update the dependencies array to be: [favouriteProducts, stocks]",{"range":"263","text":"264"},"Update the dependencies array to be: [favouriteProducts, stocks, stocks.length]",{"range":"265","text":"266"},"Update the dependencies array to be: [favouriteProducts, stockSearch, stocks, view]",{"range":"267","text":"268"},"Update the dependencies array to be: [favouriteProducts, stockSearch, stocks]",{"range":"269","text":"270"},"Update the dependencies array to be: [favouriteProducts, storeProducts]",{"range":"271","text":"272"},"Update the dependencies array to be: [storeState.userInput, loading, storeState.filteredSuggestions, favouriteProducts, storeProducts]",{"range":"273","text":"274"},"Update the dependencies array to be: [closeOnESC]",{"range":"275","text":"276"},"Update the dependencies array to be: [transactionProducts, transactionStatus.isDn]",{"range":"277","text":"278"},"Update the dependencies array to be: [prod_no, stocks, storeProducts]",{"range":"279","text":"280"},"Update the dependencies array to be: [transactions]",{"range":"281","text":"282"},[2706,2708],"[checkProduct]",[1599,1601],"[favouriteProducts, stocks]",[1685,1700],"[favouriteProducts, stocks, stocks.length]",[2593,2599],"[favouriteProducts, stockSearch, stocks, view]",[3379,3392],"[favouriteProducts, stockSearch, stocks]",[1208,1210],"[favouriteProducts, storeProducts]",[1703,1734],"[storeState.userInput, loading, storeState.filteredSuggestions, favouriteProducts, storeProducts]",[449,451],"[closeOnESC]",[14416,14440],"[transactionProducts, transactionStatus.isDn]",[976,978],"[prod_no, stocks, storeProducts]",[787,789],"[transactions]"]